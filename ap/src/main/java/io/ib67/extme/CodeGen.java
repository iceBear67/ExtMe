package io.ib67.extme;


import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import io.ib67.extme.annotation.PluginTarget;

import javax.annotation.processing.*;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.*;
import javax.lang.model.type.TypeKind;
import javax.lang.model.type.TypeMirror;
import javax.tools.FileObject;
import javax.tools.JavaFileManager;
import javax.tools.StandardLocation;
import java.io.IOException;
import java.io.Writer;
import java.util.*;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Collectors;

@SupportedAnnotationTypes("io.ib67.extme.annotation.*")
public class CodeGen extends AbstractProcessor {
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();
    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }

    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        for (Element element : roundEnv.getElementsAnnotatedWith(PluginTarget.class)) {
            for (AnnotationMirror annotationMirror : element.getAnnotationMirrors()) {
                Map<String,Object> result = new HashMap<>();
                annotationMirror.getElementValues().forEach((k,v)->{
                    result.put(k.getSimpleName().toString(),process(v.getValue()));
                });
                result.put("main",((TypeElement)element).getQualifiedName().toString());
                result.put("_comment","Generated by ExtMe AP");
                try {
                    FileObject fo = processingEnv.getFiler().createResource(StandardLocation.CLASS_OUTPUT,"","plugin.json");
                    try ( Writer wr = fo.openWriter()){
                        wr.write(GSON.toJson(result));
                        wr.flush();
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return false;
    }
    private static Object process(Object fuck){
        System.out.println(fuck.getClass());
        //((List<Attribut>)fuck)
        if(fuck instanceof List){
            List<AnnotationValue> list = (List<AnnotationValue>) fuck;
            List<Object> values = new ArrayList<>();
            for (AnnotationValue a : list) {
                values.add(a.getValue());
            }

            return values;
        }
        return fuck.toString();
    }
}
